{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\ENSAM Surfer\\\\ensamsurfer\\\\src\\\\Components\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport { withRouter } from \"react-router\";\nimport PropTypes from \"prop-types\";\nimport Player from \"./Player.js\";\nimport Mushroom from \"./Mushroom.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.totalMushrooms = Math.round((this.props.horizontalBlocks + this.props.verticalBlocks) / 2);\n\n    this.eatMushroom = (foundMushroom, startTime, steps) => {\n      const updatedMushrooms = [...this.state.mushrooms];\n      updatedMushrooms[foundMushroom.key].remaining = false;\n      this.setState({\n        mushrooms: updatedMushrooms,\n        score: this.state.score + 1\n      });\n\n      if (this.totalMushrooms === this.state.score) {\n        this.props.setTotalTime(startTime, steps);\n        this.props.history.push(\"/score\");\n      }\n    };\n\n    this.state = {\n      blockWidth: 30,\n      blockHeight: 30,\n      mushrooms: [],\n      score: 0\n    };\n\n    if (!(this.props.horizontalBlocks || this.props.verticalBlocks)) {\n      this.props.history.push(\"/\");\n    }\n\n    const getRandom = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\n    const horizontalBlocks = this.props.horizontalBlocks;\n    const verticalBlocks = this.props.verticalBlocks;\n\n    for (let i = 0; i < this.totalMushrooms; i++) {\n      this.state.mushrooms.push({\n        key: i,\n        x: getRandom(0, horizontalBlocks - 1),\n        y: getRandom(0, verticalBlocks - 1),\n        remaining: true\n      });\n    }\n  }\n\n  render() {\n    const styles = {\n      width: this.props.horizontalBlocks * this.state.blockWidth + \"px\",\n      height: this.props.verticalBlocks * this.state.blockHeight + \"px\"\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"funky\",\n        children: \"SIMPLE MARIO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Score: \", this.state.score, \" / \", this.totalMushrooms]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Start with any of the arrow keys\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        style: styles,\n        children: [/*#__PURE__*/_jsxDEV(Player, {\n          boardDetails: {\n            blockWidth: this.state.blockWidth,\n            blockHeight: this.state.blockHeight,\n            horizontalBlocks: this.props.horizontalBlocks,\n            verticalBlocks: this.props.verticalBlocks\n          },\n          mushrooms: this.state.mushrooms,\n          eatMushroom: this.eatMushroom\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), this.state.mushrooms.filter(mushroom => {\n          return mushroom.remaining;\n        }).map(mushroom => {\n          return /*#__PURE__*/_jsxDEV(Mushroom, {\n            x: mushroom.x,\n            y: mushroom.y,\n            blockWidth: this.state.blockWidth,\n            blockHeight: this.state.blockHeight\n          }, mushroom.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nBoard.propTypes = {\n  horizontalBlocks: PropTypes.number.isRequired,\n  verticalBlocks: PropTypes.number.isRequired,\n  setTotalTime: PropTypes.func.isRequired,\n  history: PropTypes.any.isRequired\n};\nexport default _c = withRouter(Board);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["C:/Users/pc/Desktop/ENSAM Surfer/ensamsurfer/src/Components/Board.js"],"names":["React","Component","withRouter","PropTypes","Player","Mushroom","Board","constructor","props","totalMushrooms","Math","round","horizontalBlocks","verticalBlocks","eatMushroom","foundMushroom","startTime","steps","updatedMushrooms","state","mushrooms","key","remaining","setState","score","setTotalTime","history","push","blockWidth","blockHeight","getRandom","min","max","floor","random","i","x","y","render","styles","width","height","filter","mushroom","map","propTypes","number","isRequired","func","any"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { withRouter } from \"react-router\";\nimport PropTypes from \"prop-types\";\n\nimport Player from \"./Player.js\";\nimport Mushroom from \"./Mushroom.js\";\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      blockWidth: 30,\n      blockHeight: 30,\n      mushrooms: [],\n      score: 0\n    };\n\n    if (!(this.props.horizontalBlocks || this.props.verticalBlocks)) {\n      this.props.history.push(\"/\");\n    }\n\n    const getRandom = (min, max) =>\n      Math.floor(Math.random() * (max - min + 1)) + min;\n\n    const horizontalBlocks = this.props.horizontalBlocks;\n    const verticalBlocks = this.props.verticalBlocks;\n\n    for (let i = 0; i < this.totalMushrooms; i++) {\n      this.state.mushrooms.push({\n        key: i,\n        x: getRandom(0, horizontalBlocks - 1),\n        y: getRandom(0, verticalBlocks - 1),\n        remaining: true\n      });\n    }\n  }\n\n  totalMushrooms = Math.round(\n    (this.props.horizontalBlocks + this.props.verticalBlocks) / 2\n  );\n\n  eatMushroom = (foundMushroom, startTime, steps) => {\n    const updatedMushrooms = [...this.state.mushrooms];\n    updatedMushrooms[foundMushroom.key].remaining = false;\n    this.setState({\n      mushrooms: updatedMushrooms,\n      score: this.state.score + 1\n    });\n\n    if (this.totalMushrooms === this.state.score) {\n      this.props.setTotalTime(startTime, steps);\n      this.props.history.push(\"/score\");\n    }\n  };\n\n  render() {\n    const styles = {\n      width: this.props.horizontalBlocks * this.state.blockWidth + \"px\",\n      height: this.props.verticalBlocks * this.state.blockHeight + \"px\"\n    };\n\n    return (\n      <div>\n        <h2 className=\"funky\">SIMPLE MARIO</h2>\n        <p>\n          Score: {this.state.score} / {this.totalMushrooms}\n        </p>\n        <p>Start with any of the arrow keys</p>\n        <div className=\"board\" style={styles}>\n          <Player\n            boardDetails={{\n              blockWidth: this.state.blockWidth,\n              blockHeight: this.state.blockHeight,\n              horizontalBlocks: this.props.horizontalBlocks,\n              verticalBlocks: this.props.verticalBlocks\n            }}\n            mushrooms={this.state.mushrooms}\n            eatMushroom={this.eatMushroom}\n          />\n          {this.state.mushrooms\n            .filter(mushroom => {\n              return mushroom.remaining;\n            })\n            .map(mushroom => {\n              return (\n                <Mushroom\n                  key={mushroom.key}\n                  x={mushroom.x}\n                  y={mushroom.y}\n                  blockWidth={this.state.blockWidth}\n                  blockHeight={this.state.blockHeight}\n                />\n              );\n            })}\n        </div>\n      </div>\n    );\n  }\n}\n\nBoard.propTypes = {\n  horizontalBlocks: PropTypes.number.isRequired,\n  verticalBlocks: PropTypes.number.isRequired,\n  setTotalTime: PropTypes.func.isRequired,\n  history: PropTypes.any.isRequired\n};\n\nexport default withRouter(Board);\n"]},"metadata":{},"sourceType":"module"}