{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\ENSAM Surfer\\\\ensamsurfer\\\\src\\\\Components\\\\Player.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Player extends Component {\n  constructor(props) {\n    super(props);\n    this.boardDetails = this.props.boardDetails;\n    this.mushrooms = this.props.mushrooms;\n    this.startTime = new Date().getTime();\n    this.steps = 0;\n\n    this.shiftDirection = direction => {\n      if (this.intervalId) {\n        clearInterval(this.intervalId);\n      }\n\n      this.intervalId = setInterval(() => {\n        switch (direction) {\n          case 37:\n            this.setState({\n              top: this.state.top,\n              left: this.state.left - 1\n            });\n            this.checkDirection(direction);\n            break;\n\n          case 38:\n            this.setState({\n              top: this.state.top - 1,\n              left: this.state.left\n            });\n            this.checkDirection(direction);\n            break;\n\n          case 39:\n            this.setState({\n              top: this.state.top,\n              left: this.state.left + 1\n            });\n            this.checkDirection(direction);\n            break;\n\n          case 40:\n            this.setState({\n              top: this.state.top + 1,\n              left: this.state.left\n            });\n            this.checkDirection(direction);\n            break;\n\n          default:\n            return;\n        }\n      }, 50);\n      const foundMushrooms = this.props.mushrooms.find(mushroom => mushroom.x === this.state.left && mushroom.y === this.state.top && mushroom.remaining);\n\n      if (foundMushrooms) {\n        this.props.eatMushroom(foundMushrooms, this.startTime, this.steps);\n      }\n    };\n\n    this.checkDirection = e => {\n      if (e.keyCode) {\n        this.steps += 1;\n      }\n\n      const toDirection = e.keyCode || e;\n      const {\n        left,\n        top\n      } = this.state;\n      const bottomLimit = this.boardDetails.verticalBlocks - 1;\n      const rightLimit = this.boardDetails.horizontalBlocks - 1;\n\n      if (left > rightLimit - 1 && toDirection === 39) {\n        // Reached RIGHT end, redirecting LEFT\n        this.shiftDirection(37);\n      } else if (top > bottomLimit - 1 && toDirection === 40) {\n        // Reached BOTTOM end, redirecting UP\n        this.shiftDirection(38);\n      } else if (top < 1 && toDirection === 38) {\n        // Reached TOP end, redirecting DOWN\n        this.shiftDirection(40);\n      } else if (left < 1 && toDirection === 37) {\n        // Reached LEFT end, redirecting RIGHT\n        this.shiftDirection(39);\n      } else {\n        this.shiftDirection(toDirection);\n      }\n    };\n\n    this.state = {\n      top: 0,\n      left: 0\n    };\n  }\n\n  componentDidMount() {\n    window.onkeydown = this.checkDirection;\n  }\n\n  componentWillUnmount() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n  }\n\n  render() {\n    const styles = {\n      height: this.boardDetails.blockHeight + \"px\",\n      width: this.boardDetails.blockWidth + \"px\",\n      marginTop: this.state.top * this.boardDetails.blockHeight + \"px\",\n      marginLeft: this.state.left * this.boardDetails.blockWidth + \"px\"\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"entity player\",\n        style: styles\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nPlayer.propTypes = {\n  boardDetails: PropTypes.object.isRequired,\n  mushrooms: PropTypes.array.isRequired,\n  eatMushroom: PropTypes.func.isRequired\n};\nexport default Player;","map":{"version":3,"sources":["C:/Users/pc/Desktop/ENSAM Surfer/ensamsurfer/src/Components/Player.js"],"names":["React","Component","PropTypes","Player","constructor","props","boardDetails","mushrooms","startTime","Date","getTime","steps","shiftDirection","direction","intervalId","clearInterval","setInterval","setState","top","state","left","checkDirection","foundMushrooms","find","mushroom","x","y","remaining","eatMushroom","e","keyCode","toDirection","bottomLimit","verticalBlocks","rightLimit","horizontalBlocks","componentDidMount","window","onkeydown","componentWillUnmount","render","styles","height","blockHeight","width","blockWidth","marginTop","marginLeft","propTypes","object","isRequired","array","func"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;AAEA,MAAMC,MAAN,SAAqBF,SAArB,CAA+B;AAC7BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAQnBC,YARmB,GAQJ,KAAKD,KAAL,CAAWC,YARP;AAAA,SASnBC,SATmB,GASP,KAAKF,KAAL,CAAWE,SATJ;AAAA,SAUnBC,SAVmB,GAUP,IAAIC,IAAJ,GAAWC,OAAX,EAVO;AAAA,SAWnBC,KAXmB,GAWX,CAXW;;AAAA,SAanBC,cAbmB,GAaFC,SAAS,IAAI;AAC5B,UAAI,KAAKC,UAAT,EAAqB;AACnBC,QAAAA,aAAa,CAAC,KAAKD,UAAN,CAAb;AACD;;AACD,WAAKA,UAAL,GAAkBE,WAAW,CAAC,MAAM;AAClC,gBAAQH,SAAR;AACE,eAAK,EAAL;AACE,iBAAKI,QAAL,CAAc;AACZC,cAAAA,GAAG,EAAE,KAAKC,KAAL,CAAWD,GADJ;AAEZE,cAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC,IAAX,GAAkB;AAFZ,aAAd;AAIA,iBAAKC,cAAL,CAAoBR,SAApB;AACA;;AACF,eAAK,EAAL;AACE,iBAAKI,QAAL,CAAc;AACZC,cAAAA,GAAG,EAAE,KAAKC,KAAL,CAAWD,GAAX,GAAiB,CADV;AAEZE,cAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC;AAFL,aAAd;AAIA,iBAAKC,cAAL,CAAoBR,SAApB;AACA;;AACF,eAAK,EAAL;AACE,iBAAKI,QAAL,CAAc;AACZC,cAAAA,GAAG,EAAE,KAAKC,KAAL,CAAWD,GADJ;AAEZE,cAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC,IAAX,GAAkB;AAFZ,aAAd;AAIA,iBAAKC,cAAL,CAAoBR,SAApB;AACA;;AACF,eAAK,EAAL;AACE,iBAAKI,QAAL,CAAc;AACZC,cAAAA,GAAG,EAAE,KAAKC,KAAL,CAAWD,GAAX,GAAiB,CADV;AAEZE,cAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC;AAFL,aAAd;AAIA,iBAAKC,cAAL,CAAoBR,SAApB;AACA;;AACF;AACE;AA9BJ;AAgCD,OAjC4B,EAiC1B,EAjC0B,CAA7B;AAmCA,YAAMS,cAAc,GAAG,KAAKjB,KAAL,CAAWE,SAAX,CAAqBgB,IAArB,CACrBC,QAAQ,IACNA,QAAQ,CAACC,CAAT,KAAe,KAAKN,KAAL,CAAWC,IAA1B,IACAI,QAAQ,CAACE,CAAT,KAAe,KAAKP,KAAL,CAAWD,GAD1B,IAEAM,QAAQ,CAACG,SAJU,CAAvB;;AAMA,UAAIL,cAAJ,EAAoB;AAClB,aAAKjB,KAAL,CAAWuB,WAAX,CAAuBN,cAAvB,EAAuC,KAAKd,SAA5C,EAAuD,KAAKG,KAA5D;AACD;AACF,KA7DkB;;AAAA,SA+DnBU,cA/DmB,GA+DFQ,CAAC,IAAI;AACpB,UAAIA,CAAC,CAACC,OAAN,EAAe;AACb,aAAKnB,KAAL,IAAc,CAAd;AACD;;AACD,YAAMoB,WAAW,GAAGF,CAAC,CAACC,OAAF,IAAaD,CAAjC;AACA,YAAM;AAAET,QAAAA,IAAF;AAAQF,QAAAA;AAAR,UAAgB,KAAKC,KAA3B;AACA,YAAMa,WAAW,GAAG,KAAK1B,YAAL,CAAkB2B,cAAlB,GAAmC,CAAvD;AACA,YAAMC,UAAU,GAAG,KAAK5B,YAAL,CAAkB6B,gBAAlB,GAAqC,CAAxD;;AAEA,UAAIf,IAAI,GAAGc,UAAU,GAAG,CAApB,IAAyBH,WAAW,KAAK,EAA7C,EAAiD;AAC/C;AACA,aAAKnB,cAAL,CAAoB,EAApB;AACD,OAHD,MAGO,IAAIM,GAAG,GAAGc,WAAW,GAAG,CAApB,IAAyBD,WAAW,KAAK,EAA7C,EAAiD;AACtD;AACA,aAAKnB,cAAL,CAAoB,EAApB;AACD,OAHM,MAGA,IAAIM,GAAG,GAAG,CAAN,IAAWa,WAAW,KAAK,EAA/B,EAAmC;AACxC;AACA,aAAKnB,cAAL,CAAoB,EAApB;AACD,OAHM,MAGA,IAAIQ,IAAI,GAAG,CAAP,IAAYW,WAAW,KAAK,EAAhC,EAAoC;AACzC;AACA,aAAKnB,cAAL,CAAoB,EAApB;AACD,OAHM,MAGA;AACL,aAAKA,cAAL,CAAoBmB,WAApB;AACD;AACF,KAvFkB;;AAEjB,SAAKZ,KAAL,GAAa;AACXD,MAAAA,GAAG,EAAE,CADM;AAEXE,MAAAA,IAAI,EAAE;AAFK,KAAb;AAID;;AAmFDgB,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,MAAM,CAACC,SAAP,GAAmB,KAAKjB,cAAxB;AACD;;AAEDkB,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAKzB,UAAT,EAAqB;AACnBC,MAAAA,aAAa,CAAC,KAAKD,UAAN,CAAb;AACD;AACF;;AAED0B,EAAAA,MAAM,GAAG;AACP,UAAMC,MAAM,GAAG;AACbC,MAAAA,MAAM,EAAE,KAAKpC,YAAL,CAAkBqC,WAAlB,GAAgC,IAD3B;AAEbC,MAAAA,KAAK,EAAE,KAAKtC,YAAL,CAAkBuC,UAAlB,GAA+B,IAFzB;AAGbC,MAAAA,SAAS,EAAE,KAAK3B,KAAL,CAAWD,GAAX,GAAiB,KAAKZ,YAAL,CAAkBqC,WAAnC,GAAiD,IAH/C;AAIbI,MAAAA,UAAU,EAAE,KAAK5B,KAAL,CAAWC,IAAX,GAAkB,KAAKd,YAAL,CAAkBuC,UAApC,GAAiD;AAJhD,KAAf;AAMA,wBACE;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,eAAf;AAA+B,QAAA,KAAK,EAAEJ;AAAtC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAhH4B;;AAmH/BtC,MAAM,CAAC6C,SAAP,GAAmB;AACjB1C,EAAAA,YAAY,EAAEJ,SAAS,CAAC+C,MAAV,CAAiBC,UADd;AAEjB3C,EAAAA,SAAS,EAAEL,SAAS,CAACiD,KAAV,CAAgBD,UAFV;AAGjBtB,EAAAA,WAAW,EAAE1B,SAAS,CAACkD,IAAV,CAAeF;AAHX,CAAnB;AAMA,eAAe/C,MAAf","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Player extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      top: 0,\n      left: 0\n    };\n  }\n\n  boardDetails = this.props.boardDetails;\n  mushrooms = this.props.mushrooms;\n  startTime = new Date().getTime();\n  steps = 0;\n\n  shiftDirection = direction => {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n    this.intervalId = setInterval(() => {\n      switch (direction) {\n        case 37:\n          this.setState({\n            top: this.state.top,\n            left: this.state.left - 1\n          });\n          this.checkDirection(direction);\n          break;\n        case 38:\n          this.setState({\n            top: this.state.top - 1,\n            left: this.state.left\n          });\n          this.checkDirection(direction);\n          break;\n        case 39:\n          this.setState({\n            top: this.state.top,\n            left: this.state.left + 1\n          });\n          this.checkDirection(direction);\n          break;\n        case 40:\n          this.setState({\n            top: this.state.top + 1,\n            left: this.state.left\n          });\n          this.checkDirection(direction);\n          break;\n        default:\n          return;\n      }\n    }, 50);\n\n    const foundMushrooms = this.props.mushrooms.find(\n      mushroom =>\n        mushroom.x === this.state.left &&\n        mushroom.y === this.state.top &&\n        mushroom.remaining\n    );\n    if (foundMushrooms) {\n      this.props.eatMushroom(foundMushrooms, this.startTime, this.steps);\n    }\n  };\n\n  checkDirection = e => {\n    if (e.keyCode) {\n      this.steps += 1;\n    }\n    const toDirection = e.keyCode || e;\n    const { left, top } = this.state;\n    const bottomLimit = this.boardDetails.verticalBlocks - 1;\n    const rightLimit = this.boardDetails.horizontalBlocks - 1;\n\n    if (left > rightLimit - 1 && toDirection === 39) {\n      // Reached RIGHT end, redirecting LEFT\n      this.shiftDirection(37);\n    } else if (top > bottomLimit - 1 && toDirection === 40) {\n      // Reached BOTTOM end, redirecting UP\n      this.shiftDirection(38);\n    } else if (top < 1 && toDirection === 38) {\n      // Reached TOP end, redirecting DOWN\n      this.shiftDirection(40);\n    } else if (left < 1 && toDirection === 37) {\n      // Reached LEFT end, redirecting RIGHT\n      this.shiftDirection(39);\n    } else {\n      this.shiftDirection(toDirection);\n    }\n  };\n\n  componentDidMount() {\n    window.onkeydown = this.checkDirection;\n  }\n\n  componentWillUnmount() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n  }\n\n  render() {\n    const styles = {\n      height: this.boardDetails.blockHeight + \"px\",\n      width: this.boardDetails.blockWidth + \"px\",\n      marginTop: this.state.top * this.boardDetails.blockHeight + \"px\",\n      marginLeft: this.state.left * this.boardDetails.blockWidth + \"px\"\n    };\n    return (\n      <div>\n        <div className=\"entity player\" style={styles} />\n      </div>\n    );\n  }\n}\n\nPlayer.propTypes = {\n  boardDetails: PropTypes.object.isRequired,\n  mushrooms: PropTypes.array.isRequired,\n  eatMushroom: PropTypes.func.isRequired\n};\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}